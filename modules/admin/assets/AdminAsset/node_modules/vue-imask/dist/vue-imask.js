(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('imask')) :
	typeof define === 'function' && define.amd ? define(['exports', 'imask'], factory) :
	(factory((global.VueIMask = {}),global.IMask));
}(this, (function (exports,IMask) { 'use strict';

IMask = IMask && IMask.hasOwnProperty('default') ? IMask['default'] : IMask;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var IMaskComponent = {
  name: 'imask-input',
  model: {
    prop: 'value',
    event: 'accept'
  },

  render: function render(createElement) {
    return createElement('input');
  },
  mounted: function mounted() {
    this.maskRef = new IMask(this.$el, this.maskOptions).on('accept', this._onAccept.bind(this)).on('complete', this._onComplete.bind(this));
    this._updateValue();
  },
  destroyed: function destroyed() {
    this.maskRef.destroy();
    delete this.maskRef;
  },


  computed: {
    maskOptions: function maskOptions() {
      return this._extractOptionsFromProps(this.$props);
    }
  },

  watch: {
    '$props': {
      handler: function handler() {
        this.maskRef.updateOptions(this.maskOptions);
        this._updateValue();
      },

      deep: true
    }
  },

  methods: {
    _extractOptionsFromProps: function _extractOptionsFromProps(props) {
      props = _extends({}, props);

      // keep only defined props
      Object.keys(props).filter(function (prop) {
        return props[prop] === undefined;
      }).forEach(function (undefinedProp) {
        delete props[undefinedProp];
      });

      delete props.value;
      delete props.unmask;

      return props;
    },
    _maskValue: function _maskValue() {
      return this.unmask ? this.maskRef.unmaskedValue : this.maskRef.value;
    },
    _updateValue: function _updateValue() {
      var value = this.value || '';
      if (this.unmask) this.maskRef.unmaskedValue = value;else this.maskRef.value = value;
    },
    _onAccept: function _onAccept() {
      this.$emit('accept', this._maskValue());
    },
    _onComplete: function _onComplete() {
      this.$emit('complete', this._maskValue());
    }
  },

  props: {
    // common
    mask: {
      required: true
    },
    value: String,
    unmask: Boolean,
    prepare: Function,
    validate: Function,
    commit: Function,

    // pattern
    placeholderChar: String,
    lazy: Boolean,
    definitions: Object,
    groups: Object,

    // date
    pattern: String,
    format: Function,
    parse: Function,

    // number
    radix: String,
    thousandsSeparator: String,
    mapToRadix: Array,
    scale: Number,
    signed: Boolean,
    normalizeZeros: Boolean,
    padFractionalZeros: Boolean,

    // dynamic
    dispatch: Function
  }
};

var IMaskDirective = {
  name: 'imask',

  bind: function bind(el, _ref) {
    var options = _ref.value;

    if (!options) return;

    initMask(el, options);
  },
  update: function update(el, _ref2) {
    var options = _ref2.value;

    if (options) {
      if (el.maskRef) el.maskRef.updateOptions(options);else initMask(el, options);
    } else {
      destroyMask(el);
    }
  },
  unbind: function unbind(el) {
    destroyMask(el);
  }
};

function fireEvent(el, eventName, data) {
  var e = document.createEvent('CustomEvent');
  e.initCustomEvent(eventName, true, true, data);
  el.dispatchEvent(e);
}

function initMask(el, opts) {
  el.maskRef = new IMask(el, opts).on('accept', function () {
    fireEvent(el, 'accept', el.maskRef);
  }).on('complete', function () {
    fireEvent(el, 'complete', el.maskRef);
  });
}

function destroyMask(el) {
  if (el.maskRef) {
    el.maskRef.destroy();
    delete el.maskRef;
  }
}

exports.IMaskComponent = IMaskComponent;
exports.IMaskDirective = IMaskDirective;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=vue-imask.js.map
