{"version":3,"file":"imask.es.min.js","sources":["../src/core/utils.js","../src/core/action-details.js","../src/core/change-details.js","../src/masked/base.js","../src/masked/factory.js","../src/masked/pattern/definition.js","../src/masked/pattern/group.js","../src/masked/pattern/chunk-tail-details.js","../src/masked/pattern.js","../src/masked/date.js","../src/controls/input.js","../src/masked/number.js","../src/masked/regexp.js","../src/masked/function.js","../src/masked/dynamic.js","../src/imask.js"],"sourcesContent":["// @flow\r\n\r\n\r\n/** Checks if value is string */\r\nexport\r\nfunction isString (str: mixed): boolean %checks {\r\n  return typeof str === 'string' || str instanceof String;\r\n}\r\n\r\n/** Conforms string with fallback */\r\nexport\r\nfunction conform (res: ?string | boolean, str: string, fallback: string=''): string {\r\n  return isString(res) ?\r\n    res :\r\n    res ?\r\n      str :\r\n      fallback;\r\n}\r\n\r\n/**\r\n  Direction\r\n  @prop {number} NONE\r\n  @prop {number} LEFT\r\n  @prop {number} RIGHT\r\n*/\r\nexport\r\nconst DIRECTION = {\r\n  NONE: 0,\r\n  LEFT: -1,\r\n  RIGHT: 1\r\n}\r\n/**\r\n  Direction\r\n  @enum {number}\r\n*/\r\nexport\r\ntype Direction = $Values<typeof DIRECTION>;\r\n\r\n/** Returns next char position in direction */\r\nexport\r\nfunction indexInDirection (pos: number, direction: Direction): number {\r\n  if (direction === DIRECTION.LEFT) --pos;\r\n  return pos;\r\n}\r\n\r\n/** Escapes regular expression control chars */\r\nexport\r\nfunction escapeRegExp (str: string): string {\r\n  return str.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1');\r\n}\r\n\r\n\r\n// cloned from https://github.com/epoberezkin/fast-deep-equal with small changes\r\nexport\r\nfunction objectIncludes (b: any, a: any): boolean {\r\n  if (a === b) return true;\r\n\r\n  var arrA = Array.isArray(a)\r\n    , arrB = Array.isArray(b)\r\n    , i;\r\n\r\n  if (arrA && arrB) {\r\n    if (a.length != b.length) return false;\r\n    for (i = 0; i < a.length; i++)\r\n      if (!objectIncludes(a[i], b[i])) return false;\r\n    return true;\r\n  }\r\n\r\n  if (arrA != arrB) return false;\r\n\r\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\r\n    var keys = Object.keys(a);\r\n    // if (keys.length !== Object.keys(b).length) return false;\r\n\r\n    var dateA = a instanceof Date\r\n      , dateB = b instanceof Date;\r\n    if (dateA && dateB) return a.getTime() == b.getTime();\r\n    if (dateA != dateB) return false;\r\n\r\n    var regexpA = a instanceof RegExp\r\n      , regexpB = b instanceof RegExp;\r\n    if (regexpA && regexpB) return a.toString() == b.toString();\r\n    if (regexpA != regexpB) return false;\r\n\r\n    for (i = 0; i < keys.length; i++)\r\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\r\n\r\n    for (i = 0; i < keys.length; i++)\r\n      if(!objectIncludes(a[keys[i]], b[keys[i]])) return false;\r\n\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/* eslint-disable no-undef */\r\nexport\r\nconst g: any = typeof window !== 'undefined' && window ||\r\n  typeof global !== 'undefined' && global.global === global && global ||\r\n  typeof self !== 'undefined' && self.self === self && self ||\r\n  {};\r\n/* eslint-enable no-undef */\r\n\r\n/** Selection range */\r\nexport\r\ntype Selection = {\r\n  start: number;\r\n  end: number;\r\n};\r\n","// @flow\r\nimport {type Direction, type Selection, DIRECTION} from './utils.js';\r\n\r\n\r\n/** Provides details of changing input */\r\nexport default\r\nclass ActionDetails {\r\n  /** Current input value */\r\n  value: string;\r\n  /** Current cursor position */\r\n  cursorPos: number;\r\n  /** Old input value */\r\n  oldValue: string;\r\n  /** Old selection */\r\n  oldSelection: Selection;\r\n\r\n  constructor (\r\n    value: string,\r\n    cursorPos: number,\r\n    oldValue: string,\r\n    oldSelection: Selection\r\n  ) {\r\n    this.value = value;\r\n    this.cursorPos = cursorPos;\r\n    this.oldValue = oldValue;\r\n    this.oldSelection = oldSelection;\r\n\r\n    // double check if left part was changed (autofilling, other non-standard input triggers)\r\n    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\r\n      --this.oldSelection.start;\r\n    }\r\n  }\r\n\r\n  /**\r\n    Start changing position\r\n    @readonly\r\n  */\r\n  get startChangePos (): number {\r\n    return Math.min(this.cursorPos, this.oldSelection.start);\r\n  }\r\n\r\n  /**\r\n    Inserted symbols count\r\n    @readonly\r\n  */\r\n  get insertedCount (): number {\r\n    return this.cursorPos - this.startChangePos;\r\n  }\r\n\r\n  /**\r\n    Inserted symbols\r\n    @readonly\r\n  */\r\n  get inserted (): string {\r\n    return this.value.substr(this.startChangePos, this.insertedCount);\r\n  }\r\n\r\n  /**\r\n    Removed symbols count\r\n    @readonly\r\n  */\r\n  get removedCount (): number {\r\n    // Math.max for opposite operation\r\n    return Math.max((this.oldSelection.end - this.startChangePos) ||\r\n      // for Delete\r\n      this.oldValue.length - this.value.length, 0);\r\n  }\r\n\r\n  /**\r\n    Removed symbols\r\n    @readonly\r\n  */\r\n  get removed (): string {\r\n    return this.oldValue.substr(this.startChangePos, this.removedCount);\r\n  }\r\n\r\n  /**\r\n    Unchanged head symbols\r\n    @readonly\r\n  */\r\n  get head (): string {\r\n    return this.value.substring(0, this.startChangePos);\r\n  }\r\n\r\n  /**\r\n    Unchanged tail symbols\r\n    @readonly\r\n  */\r\n  get tail (): string {\r\n    return this.value.substring(this.startChangePos + this.insertedCount);\r\n  }\r\n\r\n  /**\r\n    Remove direction\r\n    @readonly\r\n  */\r\n  get removeDirection (): Direction {\r\n    if (!this.removedCount || this.insertedCount) return DIRECTION.NONE;\r\n\r\n    // align right if delete at right or if range removed (event with backspace)\r\n    return (this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos) ?\r\n      DIRECTION.RIGHT :\r\n      DIRECTION.LEFT;\r\n  }\r\n}\r\n","// @flow\r\n\r\n\r\n/**\r\n  Provides details of changing model value\r\n  @param {Object} [details]\r\n  @param {string} [details.inserted] - Inserted symbols\r\n  @param {boolean} [details.overflow] - Is overflowed\r\n  @param {number} [details.removeCount] - Removed symbols count\r\n  @param {number} [details.shift] - Additional offset if any changes occurred before current position\r\n*/\r\nexport default\r\nclass ChangeDetails {\r\n  /** Inserted symbols */\r\n  inserted: string;\r\n  /** Is overflowed */\r\n  overflow: boolean;\r\n  /** Additional offset if any changes occurred before current position */\r\n  shift: number;\r\n  _rawInserted: string;\r\n\r\n  constructor (details?: {\r\n    inserted?: $PropertyType<ChangeDetails, 'inserted'>,\r\n    overflow?: $PropertyType<ChangeDetails, 'overflow'>,\r\n    shift?: $PropertyType<ChangeDetails, 'shift'>,\r\n  }) {\r\n    Object.assign(this, {\r\n      inserted: '',\r\n      overflow: false,\r\n      shift: 0,\r\n    }, details);\r\n  }\r\n\r\n  /**\r\n    Aggregate changes\r\n    @returns {ChangeDetails} `this`\r\n  */\r\n  aggregate (details: ChangeDetails): ChangeDetails {\r\n    if (details.rawInserted) this.rawInserted += details.rawInserted;\r\n    this.inserted += details.inserted;\r\n    this.shift += details.shift;\r\n    this.overflow = this.overflow || details.overflow;\r\n    return this;\r\n  }\r\n\r\n  /** Total offset considering all changes */\r\n  get offset (): number {\r\n    return this.shift + this.inserted.length;\r\n  }\r\n\r\n  /** Raw inserted is used by dynamic mask */\r\n  get rawInserted (): string {\r\n    return this._rawInserted != null ?\r\n      this._rawInserted :\r\n      this.inserted;\r\n  }\r\n\r\n  set rawInserted (rawInserted: string): void {\r\n    this._rawInserted = rawInserted;\r\n  }\r\n}\r\n","// @flow\r\nimport ChangeDetails from '../core/change-details.js';\r\nimport {type Direction, DIRECTION} from '../core/utils.js';\r\nimport {type TailDetails} from '../core/tail-details.js';\r\n\r\n\r\n/** Supported mask type */\r\nexport\r\ntype Mask = string | String | RegExp | Class<Number> | Class<Date> | Array<any> | Function | Masked<*> | Class<Masked<*>>;\r\n\r\n/** Append flags */\r\nexport\r\ntype AppendFlags = {\r\n  input?: boolean,\r\n  tail?: boolean,\r\n  raw?: boolean\r\n};\r\n\r\n/** Extract flags */\r\nexport\r\ntype ExtractFlags = {\r\n  raw?: boolean\r\n};\r\n\r\nexport\r\ntype MaskedOptions<MaskType> = {\r\n  mask: $PropertyType<Masked<MaskType>, 'mask'>,\r\n  prepare?: $PropertyType<Masked<MaskType>, 'prepare'>,\r\n  validate?: $PropertyType<Masked<MaskType>, 'validate'>,\r\n  commit?: $PropertyType<Masked<MaskType>, 'commit'>,\r\n};\r\n\r\n\r\n/** Provides common masking stuff */\r\nexport default\r\nclass Masked<MaskType> {\r\n  static DEFAULTS: any; // $Shape<MaskedOptions>; TODO after fix https://github.com/facebook/flow/issues/4773\r\n\r\n  /** @type {Mask} */\r\n  mask: MaskType;\r\n  /** Transforms value before mask processing */\r\n  prepare: (string, Masked<MaskType>, AppendFlags) => string;\r\n  /** Validates if value is acceptable */\r\n  validate: (string, Masked<MaskType>, AppendFlags) => boolean;\r\n  /** Does additional processing in the end of editing */\r\n  commit: (string, AppendFlags) => void;\r\n  /** */\r\n  isInitialized: boolean;\r\n  _value: string;\r\n  _refreshing: boolean;\r\n\r\n  constructor (opts: {[string]: any}) {\r\n    this._value = '';\r\n    this._update({\r\n      ...Masked.DEFAULTS,\r\n      ...opts\r\n    });\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  /** Sets and applies new options */\r\n  updateOptions (opts: {[string]: any}) {\r\n    this.withValueRefresh(this._update.bind(this, opts));\r\n  }\r\n\r\n  /**\r\n    Sets new options\r\n    @protected\r\n  */\r\n  _update (opts: {[string]: any}) {\r\n    Object.assign(this, opts);\r\n  }\r\n\r\n  /** Clones masked with options and value */\r\n  clone (): Masked<MaskType> {\r\n    const m = new Masked(this);\r\n    m._value = this.value.slice();\r\n    return m;\r\n  }\r\n\r\n  /** */\r\n  assign (source: Masked<MaskType>): Masked<MaskType> {\r\n    // $FlowFixMe\r\n    return Object.assign(this, source);\r\n  }\r\n\r\n  /** Resets value */\r\n  reset () {\r\n    this._value = '';\r\n  }\r\n\r\n  /** */\r\n  get value (): string {\r\n    return this._value;\r\n  }\r\n\r\n  set value (value: string) {\r\n    this.resolve(value);\r\n  }\r\n\r\n  /** Resolve new value */\r\n  resolve (value: string): string {\r\n    this.reset();\r\n    this._append(value, {input: true});\r\n    this._appendTail();\r\n    this.doCommit();\r\n    return this.value;\r\n  }\r\n\r\n  /** */\r\n  get unmaskedValue (): string {\r\n    return this.value;\r\n  }\r\n\r\n  set unmaskedValue (value: string) {\r\n    this.reset();\r\n    this._append(value);\r\n    this._appendTail();\r\n    this.doCommit();\r\n  }\r\n\r\n  /** Value that includes raw user input */\r\n  get rawInputValue (): string {\r\n    return this.extractInput(0, this.value.length, {raw: true});\r\n  }\r\n\r\n  set rawInputValue (value: string) {\r\n    this.reset();\r\n    this._append(value, {raw: true});\r\n    this._appendTail();\r\n    this.doCommit();\r\n  }\r\n\r\n  /** */\r\n  get isComplete (): boolean {\r\n    return true;\r\n  }\r\n\r\n  /** Finds nearest input position in direction */\r\n  nearestInputPos (cursorPos: number, direction?: Direction): number {\r\n    return cursorPos;\r\n  }\r\n\r\n  /** Extracts value in range considering flags */\r\n  extractInput (fromPos: number=0, toPos: number=this.value.length, flags?: ExtractFlags): string {\r\n    return this.value.slice(fromPos, toPos);\r\n  }\r\n\r\n  /** Extracts tail in range */\r\n  _extractTail (fromPos: number=0, toPos: number=this.value.length): TailDetails {\r\n    return {\r\n      value: this.extractInput(fromPos, toPos),\r\n      fromPos,\r\n      toPos,\r\n    };\r\n  }\r\n\r\n  /** Appends tail */\r\n  _appendTail (tail?: TailDetails): ChangeDetails {\r\n    return this._append(tail ? tail.value: '', {tail: true});\r\n  }\r\n\r\n  /** Appends symbols considering flags */\r\n  _append (str: string, flags: AppendFlags={}): ChangeDetails {\r\n    const oldValueLength = this.value.length;\r\n    let consistentValue: Masked<MaskType> = this.clone();\r\n    let overflow = false;\r\n\r\n    str = this.doPrepare(str, flags);\r\n\r\n    for (let ci=0; ci<str.length; ++ci) {\r\n      this._value += str[ci];\r\n      if (this.doValidate(flags) === false) {\r\n        this.assign(consistentValue);\r\n        if (!flags.input) {\r\n          // in `input` mode dont skip invalid chars\r\n          overflow = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      consistentValue = this.clone();\r\n    }\r\n\r\n    return new ChangeDetails({\r\n      inserted: this.value.slice(oldValueLength),\r\n      overflow\r\n    });\r\n  }\r\n\r\n  /** Appends symbols considering tail */\r\n  appendWithTail (str: string, tail: TailDetails): ChangeDetails {\r\n    // TODO refactor\r\n    const aggregateDetails = new ChangeDetails();\r\n    let consistentValue = this.clone();\r\n    let consistentAppended: Masked<MaskType>;\r\n\r\n    for (let ci=0; ci<str.length; ++ci) {\r\n      const ch = str[ci];\r\n\r\n      const appendDetails = this._append(ch, {input: true});\r\n      consistentAppended = this.clone();\r\n      const tailAppended = !appendDetails.overflow && !this._appendTail(tail).overflow;\r\n      if (!tailAppended || this.doValidate({tail: true}) === false) {\r\n        this.assign(consistentValue);\r\n        break;\r\n      }\r\n\r\n      this.assign(consistentAppended);\r\n      consistentValue = this.clone();\r\n      aggregateDetails.aggregate(appendDetails);\r\n    }\r\n\r\n    // TODO needed for cases when\r\n    // 1) REMOVE ONLY AND NO LOOP AT ALL\r\n    // 2) last loop iteration removes tail\r\n    // 3) when breaks on tail insert\r\n\r\n    // aggregate only shift from tail\r\n    aggregateDetails.shift += this._appendTail(tail).shift;\r\n\r\n    return aggregateDetails;\r\n  }\r\n\r\n  /** */\r\n  remove (from: number=0, count: number=this.value.length-from): ChangeDetails {\r\n    this._value = this.value.slice(0, from) + this.value.slice(from + count);\r\n    return new ChangeDetails();\r\n  }\r\n\r\n  /** Calls function and reapplies current value */\r\n  withValueRefresh<T>(fn: () => T): T {\r\n    if (this._refreshing || !this.isInitialized) return fn();\r\n    this._refreshing = true;\r\n\r\n    const unmasked = this.unmaskedValue;\r\n\r\n    const ret = fn();\r\n\r\n    this.unmaskedValue = unmasked;\r\n\r\n    delete this._refreshing;\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n    Prepares string before mask processing\r\n    @protected\r\n  */\r\n  doPrepare (str: string, flags: AppendFlags={}): string {\r\n    return this.prepare(str, this, flags);\r\n  }\r\n\r\n  /**\r\n    Validates if value is acceptable\r\n    @protected\r\n  */\r\n  doValidate (flags: AppendFlags): boolean {\r\n    return this.validate(this.value, this, flags);\r\n  }\r\n\r\n  /**\r\n    Does additional processing in the end of editing\r\n    @protected\r\n  */\r\n  doCommit () {\r\n    this.commit(this.value, this);\r\n  }\r\n\r\n  // TODO\r\n  // insert (str, fromPos, flags)\r\n\r\n  /** */\r\n  splice (start: number, deleteCount: number, inserted: string, removeDirection: Direction): ChangeDetails {\r\n    const tailPos: number = start + deleteCount;\r\n    const tail: TailDetails = this._extractTail(tailPos);\r\n\r\n    let startChangePos: number = this.nearestInputPos(start, removeDirection);\r\n    const changeDetails: ChangeDetails = new ChangeDetails({\r\n      shift: startChangePos - start  // adjust shift if start was aligned\r\n    }).aggregate(this.remove(startChangePos))\r\n      .aggregate(this.appendWithTail(inserted, tail));\r\n\r\n    return changeDetails;\r\n  }\r\n}\r\nMasked.DEFAULTS = {\r\n  prepare: val => val,\r\n  validate: () => true,\r\n  commit: () => {},\r\n};\r\n","// @flow\r\nimport {g, isString} from '../core/utils.js';\r\nimport type Masked from './base.js';\r\nimport {type Mask} from './base.js';\r\n\r\n\r\n/** Get Masked class by mask type */\r\nexport\r\nfunction maskedClass (mask: Mask): Class<Masked<*>> {\r\n  if (mask == null) {\r\n    throw new Error('mask property should be defined');\r\n  }\r\n\r\n  if (mask instanceof RegExp) return g.IMask.MaskedRegExp;\r\n  if (isString(mask)) return g.IMask.MaskedPattern;\r\n  if (mask instanceof Date || mask === Date) return g.IMask.MaskedDate;\r\n  if (mask instanceof Number || typeof mask === 'number' || mask === Number) return g.IMask.MaskedNumber;\r\n  if (Array.isArray(mask) || mask === Array) return g.IMask.MaskedDynamic;\r\n  // $FlowFixMe\r\n  if (mask.prototype instanceof g.IMask.Masked) return mask;\r\n  // $FlowFixMe\r\n  if (mask instanceof Function) return g.IMask.MaskedFunction;\r\n\r\n  console.warn('Mask not found for mask', mask);  // eslint-disable-line no-console\r\n  return g.IMask.Masked;\r\n}\r\n\r\n/** Creates new {@link Masked} depending on mask type */\r\nexport default\r\nfunction createMask (opts: {mask: Mask}): Masked<*> {\r\n  opts = Object.assign({}, opts);  // clone\r\n  const mask = opts.mask;\r\n\r\n  if (mask instanceof g.IMask.Masked) return mask;\r\n\r\n  const MaskedClass = maskedClass(mask);\r\n  return new MaskedClass(opts);\r\n}\r\n","// @flow\r\nimport createMask from '../factory.js';\r\nimport type Masked from '../base.js';\r\nimport {type Mask} from '../base.js';\r\n\r\n\r\ntype Definitions = {[string]: Mask};\r\n/** */\r\ntype DefinitionType = $Values<typeof PatternDefinition.TYPES>;\r\ntype DefinitionTypes = {[string]: DefinitionType};\r\n\r\n/** */\r\nexport default\r\nclass PatternDefinition {\r\n  static TYPES: DefinitionTypes;\r\n  static DEFAULTS: Definitions;\r\n\r\n  /** */\r\n  char: ?string;\r\n  /** */\r\n  stopAlign: ?boolean;\r\n  /** */\r\n  optional: boolean;\r\n  /** */\r\n  isHollow: boolean;\r\n  /** */\r\n  isRawInput: boolean;\r\n  /** */\r\n  type: DefinitionType;\r\n  /** */\r\n  _masked: Masked<*>;\r\n\r\n  constructor(opts: any) {  // TODO flow\r\n    Object.assign(this, opts);\r\n\r\n    if (this.mask) {\r\n      this._masked = createMask(opts);\r\n    }\r\n  }\r\n\r\n  /** */\r\n  reset () {\r\n    this.isHollow = false;\r\n    this.isRawInput = false;\r\n    if (this._masked) this._masked.reset();\r\n  }\r\n\r\n  /** */\r\n  get isInput (): boolean {\r\n    return this.type === PatternDefinition.TYPES.INPUT;\r\n  }\r\n\r\n  /** */\r\n  get isHiddenHollow (): boolean {\r\n    return this.isHollow && this.optional;\r\n  }\r\n\r\n  /** */\r\n  resolve (ch: string): boolean | string {\r\n    if (!this._masked) return false;\r\n    return this._masked.resolve(ch);\r\n  }\r\n}\r\nPatternDefinition.DEFAULTS = {\r\n  '0': /\\d/,\r\n  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,  // http://stackoverflow.com/a/22075070\r\n  '*': /./\r\n};\r\n/**\r\n  @prop {string} INPUT\r\n  @prop {string} FIXED\r\n*/\r\nPatternDefinition.TYPES = {\r\n  INPUT: 'input',\r\n  FIXED: 'fixed'\r\n};\r\n","// @flow\r\nimport type MaskedPattern from '../pattern.js';\r\nimport {type AppendFlags} from '../base.js';\r\n\r\n\r\n/** */\r\nexport\r\ninterface PatternGroupTemplate {\r\n  validate: $PropertyType<PatternGroup, 'validate'>;\r\n  mask: $PropertyType<PatternGroup, 'mask'>;\r\n}\r\n\r\n/** */\r\ntype PatternGroupOptions = PatternGroupTemplate & {\r\n  name: $PropertyType<PatternGroup, 'name'>,\r\n  offset: $PropertyType<PatternGroup, 'offset'>,\r\n};\r\n\r\n/**\r\n  Pattern group symbols from parent\r\n  @param {MaskedPattern} masked - Internal {@link masked} model\r\n  @param {Object} opts\r\n  @param {string} opts.name - Group name\r\n  @param {number} opts.offset - Group offset in masked definitions array\r\n  @param {string} opts.mask - Group mask\r\n  @param {Function} [opts.validate] - Custom group validator\r\n*/\r\nexport default\r\nclass PatternGroup {\r\n  /** */\r\n  static Range: typeof RangeGroup;\r\n  /** */\r\n  static Enum: typeof EnumGroup;\r\n\r\n  /** Internal {@link masked} model */\r\n  masked: MaskedPattern;\r\n  /** Group name */\r\n  name: string;\r\n  /** Group offset in masked definitions array */\r\n  offset: number;\r\n  /** Group mask */\r\n  mask: string;\r\n  /** Custom group validator */\r\n  validate: (string, PatternGroup, AppendFlags) => boolean;\r\n\r\n  constructor(masked: MaskedPattern, {name, offset, mask, validate}: PatternGroupOptions) {\r\n    this.masked = masked;\r\n    this.name = name;\r\n    this.offset = offset;\r\n    this.mask = mask;\r\n    this.validate = validate || (() => true);\r\n  }\r\n\r\n  /** Slice of internal {@link masked} value */\r\n  get value (): string {\r\n    return this.masked.value.slice(\r\n      this.masked.mapDefIndexToPos(this.offset),\r\n      this.masked.mapDefIndexToPos(this.offset + this.mask.length));\r\n  }\r\n\r\n  /** Unmasked slice of internal {@link masked} value */\r\n  get unmaskedValue (): string {\r\n    return this.masked.extractInput(\r\n      this.masked.mapDefIndexToPos(this.offset),\r\n      this.masked.mapDefIndexToPos(this.offset + this.mask.length));\r\n  }\r\n\r\n  /** Validates if current value is acceptable */\r\n  doValidate (flags: AppendFlags) {\r\n    return this.validate(this.value, this, flags);\r\n  }\r\n}\r\n\r\n/**\r\n  Pattern group that validates number ranges\r\n  @param {number[]} range - [from, to]\r\n  @param {?number} maxlen - Maximum number length, will be padded with leading zeros\r\n*/\r\nexport\r\nclass RangeGroup implements PatternGroupTemplate {\r\n  /** @type {string} */\r\n  mask: $PropertyType<PatternGroup, 'mask'>;\r\n  /** @type {Function} */\r\n  validate: $PropertyType<PatternGroup, 'validate'>;\r\n  _maxLength: number;\r\n  _from: number;\r\n  _to: number;\r\n\r\n  constructor ([from, to]: [number, number], maxlen: number=String(to).length) {\r\n    this._from = from;\r\n    this._to = to;\r\n    this._maxLength = maxlen;\r\n    this.validate = this.validate.bind(this);\r\n\r\n    this._update();\r\n  }\r\n\r\n  get to (): number {\r\n    return this._to;\r\n  }\r\n\r\n  set to (to: number) {\r\n    this._to = to;\r\n    this._update();\r\n  }\r\n\r\n  get from (): number {\r\n    return this._from;\r\n  }\r\n\r\n  set from (from: number) {\r\n    this._from = from;\r\n    this._update();\r\n  }\r\n\r\n  get maxLength (): number {\r\n    return this._maxLength;\r\n  }\r\n\r\n  set maxLength (maxLength: number) {\r\n    this._maxLength = maxLength;\r\n    this._update();\r\n  }\r\n\r\n  get _matchFrom (): number {\r\n    return this.maxLength - String(this.from).length;\r\n  }\r\n\r\n  _update() {\r\n    this._maxLength = Math.max(this._maxLength, String(this.to).length);\r\n    this.mask = '0'.repeat(this._maxLength);\r\n  }\r\n\r\n  validate (str: string): boolean {\r\n    let minstr = '';\r\n    let maxstr = '';\r\n\r\n    const [, placeholder, num] = str.match(/^(\\D*)(\\d*)(\\D*)/) || [];\r\n    if (num) {\r\n      minstr = ('0'.repeat(placeholder.length) + num);\r\n      maxstr = ('9'.repeat(placeholder.length) + num);\r\n    }\r\n\r\n    const firstNonZero = str.search(/[^0]/);\r\n    if (firstNonZero === -1 && str.length <= this._matchFrom) return true;\r\n\r\n    minstr = minstr.padEnd(this._maxLength, '0');\r\n    maxstr = maxstr.padEnd(this._maxLength, '9');\r\n\r\n    return this.from <= Number(maxstr) && Number(minstr) <= this.to;\r\n  }\r\n}\r\n\r\n/** Pattern group that validates enum values */\r\nexport\r\nfunction EnumGroup (enums: Array<string>): PatternGroupTemplate {\r\n  return {\r\n    mask: '*'.repeat(enums[0].length),\r\n    validate: (value: string, group: PatternGroup, flags: AppendFlags) => enums.some(e => e.indexOf(group.unmaskedValue) >= 0)\r\n  };\r\n}\r\n\r\nPatternGroup.Range = RangeGroup;\r\nPatternGroup.Enum = EnumGroup;\r\n","// @flow\r\nimport {type TailDetails} from '../../core/tail-details.js';\r\n\r\n\r\nexport\r\ntype TailInputChunk = {\r\n  stop: ?number,\r\n  value: string\r\n};\r\n\r\nexport\r\nclass ChunksTailDetails implements TailDetails {\r\n  chunks: Array<TailInputChunk>;\r\n\r\n  constructor (chunks: Array<TailInputChunk>) {\r\n    this.chunks = chunks;\r\n  }\r\n\r\n  get value (): string {\r\n    return this.chunks.map(c => c.value).join('');\r\n  }\r\n\r\n  get fromPos (): ?number {\r\n    const firstChunk = this.chunks[0];\r\n    return firstChunk && firstChunk.stop;\r\n  }\r\n\r\n  get toPos (): ?number {\r\n    const lastChunk = this.chunks[this.chunks.length - 1];\r\n    return lastChunk && lastChunk.stop;\r\n  }\r\n}\r\n","// @flow\r\nimport {conform, DIRECTION, indexInDirection, type Direction} from '../core/utils.js';\r\nimport ChangeDetails from '../core/change-details.js';\r\nimport Masked, {type AppendFlags, type ExtractFlags, type MaskedOptions} from './base.js';\r\nimport PatternDefinition from './pattern/definition.js';\r\nimport PatternGroup, {type PatternGroupTemplate} from './pattern/group.js';\r\nimport {ChunksTailDetails, type TailInputChunk} from './pattern/chunk-tail-details.js';\r\nimport {type TailDetails} from '../core/tail-details.js';\r\n\r\n\r\ntype MaskedPatternOptions = {\r\n  ...MaskedOptions<string>,\r\n  definitions: $PropertyType<MaskedPattern, 'definitions'>,\r\n  groups: $PropertyType<MaskedPattern, 'groups'>,\r\n  placeholderChar: $PropertyType<MaskedPattern, 'placeholderChar'>,\r\n  lazy: $PropertyType<MaskedPattern, 'lazy'>,\r\n};\r\ntype InputChunk = [?number, string];\r\n\r\n\r\n/**\r\n  Pattern mask\r\n  @param {Object} opts\r\n  @param {Object} opts.groups\r\n  @param {Object} opts.definitions\r\n  @param {string} opts.placeholderChar\r\n  @param {boolean} opts.lazy\r\n*/\r\nexport default\r\nclass MaskedPattern extends Masked<string> {\r\n  static DEFAULTS: any;\r\n  static STOP_CHAR: string;\r\n  static ESCAPE_CHAR: string;\r\n  static Definition: Class<PatternDefinition>;\r\n  static Group: Class<PatternGroup>;\r\n\r\n  /** */\r\n  groups: {[string]: PatternGroupTemplate};\r\n  /** */\r\n  definitions: {[string]: any};  // TODO mask type\r\n  /** Single char for empty input */\r\n  placeholderChar: string;\r\n  /** Show placeholder only when needed */\r\n  lazy: boolean;\r\n  _charDefs: Array<PatternDefinition>;\r\n  _groupDefs: Array<PatternGroup>;\r\n\r\n  constructor (opts: any={}) {  // TODO type $Shape<MaskedPatternOptions>={} does not work\r\n    opts.definitions = Object.assign({}, PatternDefinition.DEFAULTS, opts.definitions);\r\n    super({\r\n      ...MaskedPattern.DEFAULTS,\r\n      ...opts\r\n    });\r\n  }\r\n\r\n  /**\r\n    @override\r\n    @param {Object} opts\r\n  */\r\n  _update (opts: $Shape<MaskedPatternOptions>={}) {\r\n    opts.definitions = Object.assign({}, this.definitions, opts.definitions);\r\n    super._update(opts);\r\n    this._rebuildMask();\r\n  }\r\n\r\n  /** */\r\n  _rebuildMask () {\r\n    const defs = this.definitions;\r\n    this._charDefs = [];\r\n    this._groupDefs = [];\r\n\r\n    let pattern = this.mask;\r\n    if (!pattern || !defs) return;\r\n\r\n    let unmaskingBlock = false;\r\n    let optionalBlock = false;\r\n    let stopAlign = false;\r\n\r\n    for (let i=0; i<pattern.length; ++i) {\r\n      if (this.groups) {\r\n        const p = pattern.slice(i);\r\n        const gNames = Object.keys(this.groups).filter(gName => p.indexOf(gName) === 0);\r\n        // order by key length\r\n        gNames.sort((a, b) => b.length - a.length);\r\n        // use group name with max length\r\n        const gName = gNames[0];\r\n        if (gName) {\r\n          const group = this.groups[gName];\r\n          this._groupDefs.push(new PatternGroup(this, {\r\n            name: gName,\r\n            offset: this._charDefs.length,\r\n            mask: group.mask,\r\n            validate: group.validate,\r\n          }));\r\n          pattern = pattern.replace(gName, group.mask);\r\n        }\r\n      }\r\n\r\n      let char = pattern[i];\r\n      let type = char in defs ?\r\n        PatternDefinition.TYPES.INPUT :\r\n        PatternDefinition.TYPES.FIXED;\r\n      const unmasking = type === PatternDefinition.TYPES.INPUT || unmaskingBlock;\r\n      const optional = type === PatternDefinition.TYPES.INPUT && optionalBlock;\r\n\r\n      if (char === MaskedPattern.STOP_CHAR) {\r\n        stopAlign = true;\r\n        continue;\r\n      }\r\n\r\n      if (char === '{' || char === '}') {\r\n        unmaskingBlock = !unmaskingBlock;\r\n        continue;\r\n      }\r\n\r\n      if (char === '[' || char === ']') {\r\n        optionalBlock = !optionalBlock;\r\n        continue;\r\n      }\r\n\r\n      if (char === MaskedPattern.ESCAPE_CHAR) {\r\n        ++i;\r\n        char = pattern[i];\r\n        if (!char) break;\r\n        type = PatternDefinition.TYPES.FIXED;\r\n      }\r\n\r\n      this._charDefs.push(new PatternDefinition({\r\n        char,\r\n        type,\r\n        optional,\r\n        stopAlign,\r\n        unmasking,\r\n        mask: type === PatternDefinition.TYPES.INPUT ?\r\n          defs[char] :\r\n          (value => value === char)\r\n      }));\r\n\r\n      stopAlign = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  doValidate (...args: *) {\r\n    return this._groupDefs.every(g => g.doValidate(...args)) && super.doValidate(...args);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  clone () {\r\n    const m = new MaskedPattern(this);\r\n    m._value = this.value;\r\n    // $FlowFixMe\r\n    m._charDefs.forEach((d, i) => Object.assign(d, this._charDefs[i]));\r\n    // $FlowFixMe\r\n    m._groupDefs.forEach((d, i) => Object.assign(d, this._groupDefs[i]));\r\n    return m;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  reset () {\r\n    super.reset();\r\n    this._charDefs.forEach(d => {delete d.isHollow;});\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  get isComplete (): boolean {\r\n    return !this._charDefs.some((d, i) =>\r\n      d.isInput && !d.optional && (d.isHollow || !this.extractInput(i, i+1)));\r\n  }\r\n\r\n  /** */\r\n  hiddenHollowsBefore (defIndex: number): number {\r\n    return this._charDefs\r\n      .slice(0, defIndex)\r\n      .filter(d => d.isHiddenHollow)\r\n      .length;\r\n  }\r\n\r\n  /** Map definition index to position on view */\r\n  mapDefIndexToPos (defIndex: number): number {\r\n    return defIndex - this.hiddenHollowsBefore(defIndex);\r\n  }\r\n\r\n  /** Map position on view to definition index */\r\n  mapPosToDefIndex (pos: number): number {\r\n    let defIndex = pos;\r\n    for (let di=0; di<this._charDefs.length; ++di) {\r\n      const def = this._charDefs[di];\r\n      if (di >= defIndex) break;\r\n      if (def.isHiddenHollow) ++defIndex;\r\n    }\r\n    return defIndex;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  get unmaskedValue (): string {\r\n    const str = this.value;\r\n    let unmasked = '';\r\n\r\n    for (let ci=0, di=0; ci<str.length && di<this._charDefs.length; ++di) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      if (def.isHiddenHollow) continue;\r\n      if (def.unmasking && !def.isHollow) unmasked += ch;\r\n      ++ci;\r\n    }\r\n\r\n    return unmasked;\r\n  }\r\n\r\n  set unmaskedValue (unmaskedValue: string) {\r\n    super.unmaskedValue = unmaskedValue;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _appendTail (tail?: ChunksTailDetails | TailDetails): ChangeDetails {\r\n    const details = new ChangeDetails();\r\n    if (tail) {\r\n      details.aggregate(tail instanceof ChunksTailDetails ?\r\n        this._appendChunks(tail.chunks, {tail: true}) :\r\n        super._appendTail(tail));\r\n    }\r\n    return details.aggregate(this._appendPlaceholder());\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _append (str: string, flags: AppendFlags={}): ChangeDetails {\r\n    const oldValueLength = this.value.length;\r\n    let rawInserted = '';\r\n    let overflow = false;\r\n\r\n    str = this.doPrepare(str, flags);\r\n\r\n    for (let ci=0, di=this.mapPosToDefIndex(this.value.length); ci < str.length;) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      // check overflow\r\n      if (def == null) {\r\n        overflow = true;\r\n        break;\r\n      }\r\n\r\n      // reset\r\n      def.isHollow = false;\r\n\r\n      let resolved, skipped;\r\n      let chres = conform(def.resolve(ch), ch);\r\n\r\n      if (def.type === PatternDefinition.TYPES.INPUT) {\r\n        if (chres) {\r\n          this._value += chres;\r\n          if (!this.doValidate()) {\r\n            chres = '';\r\n            this._value = this.value.slice(0, -1);\r\n          }\r\n        }\r\n\r\n        resolved = !!chres;\r\n        skipped = !chres && !def.optional;\r\n\r\n        if (!chres) {\r\n          if (!def.optional && !flags.input && !this.lazy) {\r\n            this._value += this.placeholderChar;\r\n            skipped = false;\r\n          }\r\n          if (!skipped) def.isHollow = true;\r\n        } else {\r\n          rawInserted += chres;\r\n        }\r\n      } else {\r\n        this._value += def.char;\r\n        resolved = chres && (def.unmasking || flags.input || flags.raw) && !flags.tail;\r\n        def.isRawInput = resolved && (flags.raw || flags.input);\r\n        if (def.isRawInput) rawInserted += def.char;\r\n      }\r\n\r\n      if (!skipped) ++di;\r\n      if (resolved || skipped) ++ci;\r\n    }\r\n\r\n    return new ChangeDetails({\r\n      inserted: this.value.slice(oldValueLength),\r\n      rawInserted,\r\n      overflow\r\n    });\r\n  }\r\n\r\n  /** Appends chunks splitted by stop chars */\r\n  _appendChunks (chunks: Array<TailInputChunk>, ...args: *) {\r\n    const details = new ChangeDetails();\r\n    for (let ci=0; ci < chunks.length; ++ci) {\r\n      const {stop, value} = chunks[ci];\r\n      const fromDef = stop != null && this._charDefs[stop];\r\n      // lets double check if stopAlign is here\r\n      if (fromDef && fromDef.stopAlign) details.aggregate(this._appendPlaceholder(stop));\r\n      if (details.aggregate(this._append(value, ...args)).overflow) break;\r\n    }\r\n    return details;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _extractTail (fromPos: number=0, toPos: number=this.value.length): ChunksTailDetails {\r\n    return new ChunksTailDetails(this._extractInputChunks(fromPos, toPos));\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  extractInput (fromPos: number=0, toPos: number=this.value.length, flags: ExtractFlags={}): string {\r\n    if (fromPos === toPos) return '';\r\n\r\n    const str = this.value;\r\n    let input = '';\r\n\r\n    const toDefIndex = this.mapPosToDefIndex(toPos);\r\n    for (\r\n      let ci=fromPos, di=this.mapPosToDefIndex(fromPos);\r\n      ci<toPos && ci<str.length && di < toDefIndex;\r\n      ++di\r\n    ) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      if (!def) break;\r\n      if (def.isHiddenHollow) continue;\r\n\r\n      if (def.isInput && !def.isHollow ||\r\n        flags.raw && !def.isInput && def.isRawInput) input += ch;\r\n      ++ci;\r\n    }\r\n    return input;\r\n  }\r\n\r\n  /** Extracts chunks from input splitted by stop chars */\r\n  _extractInputChunks (fromPos: number=0, toPos: number=this.value.length): Array<TailInputChunk> {\r\n    if (fromPos === toPos) return [];\r\n\r\n    const fromDefIndex = this.mapPosToDefIndex(fromPos);\r\n    const toDefIndex = this.mapPosToDefIndex(toPos);\r\n    const stopDefIndices = this._charDefs\r\n      .map((d, i) => [d, i])\r\n      .slice(fromDefIndex, toDefIndex)\r\n      .filter(([d]) => d.stopAlign)\r\n      .map(([, i]) => i);\r\n\r\n    const stops = [\r\n      fromDefIndex,\r\n      ...stopDefIndices,\r\n      toDefIndex\r\n    ];\r\n\r\n    return stops.map((s, i) => ({\r\n      stop: stopDefIndices.indexOf(s) >= 0 ?\r\n        s :\r\n        null,\r\n\r\n      value: this.extractInput(\r\n        this.mapDefIndexToPos(s),\r\n        this.mapDefIndexToPos(stops[++i]))\r\n    })).filter(({stop, value}) => stop != null || value);\r\n  }\r\n\r\n  /** Appends placeholder depending on laziness */\r\n  _appendPlaceholder (toDefIndex: ?number): ChangeDetails {\r\n    const oldValueLength = this.value.length;\r\n    const maxDefIndex = toDefIndex || this._charDefs.length;\r\n    for (let di=this.mapPosToDefIndex(this.value.length); di < maxDefIndex; ++di) {\r\n      const def = this._charDefs[di];\r\n      if (def.isInput) def.isHollow = true;\r\n\r\n      if (!this.lazy || toDefIndex) {\r\n        this._value += !def.isInput && def.char != null ?\r\n          def.char :\r\n          !def.optional ?\r\n            this.placeholderChar :\r\n            '';\r\n      }\r\n    }\r\n    return new ChangeDetails({\r\n      inserted: this.value.slice(oldValueLength)\r\n    });\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  remove (from: number=0, count: number=this.value.length-from): ChangeDetails {\r\n    const fromDefIndex = this.mapPosToDefIndex(from);\r\n    const toDefIndex = this.mapPosToDefIndex(from + count);\r\n    this._charDefs\r\n      .slice(fromDefIndex, toDefIndex)\r\n      .forEach(d => d.reset());\r\n\r\n    return super.remove(from, count);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  nearestInputPos (cursorPos: number, direction: Direction=DIRECTION.NONE) {\r\n    let step = direction || DIRECTION.RIGHT;\r\n\r\n    const initialDefIndex = this.mapPosToDefIndex(cursorPos);\r\n    const initialDef = this._charDefs[initialDefIndex];\r\n    let di = initialDefIndex;\r\n\r\n    let firstInputIndex,\r\n        firstFilledInputIndex,\r\n        firstVisibleHollowIndex,\r\n        nextdi;\r\n\r\n    // check if chars at right is acceptable for LEFT and NONE directions\r\n    if (direction !== DIRECTION.RIGHT &&\r\n      (initialDef && initialDef.isInput ||\r\n        // in none direction latest position is acceptable also\r\n        direction === DIRECTION.NONE && cursorPos === this.value.length)) {\r\n      firstInputIndex = initialDefIndex;\r\n      if (initialDef && !initialDef.isHollow) firstFilledInputIndex = initialDefIndex;\r\n    }\r\n\r\n    if ((firstFilledInputIndex == null && direction == DIRECTION.LEFT) || firstInputIndex == null) {\r\n      // search forward\r\n      for (\r\n        nextdi = indexInDirection(di, step);\r\n        0 <= nextdi && nextdi < this._charDefs.length;\r\n        di += step, nextdi += step\r\n      ) {\r\n        const nextDef = this._charDefs[nextdi];\r\n        if (firstInputIndex == null && nextDef.isInput) {\r\n          firstInputIndex = di;\r\n          if (direction === DIRECTION.NONE) break;\r\n        }\r\n        if (firstVisibleHollowIndex == null && nextDef.isHollow && !nextDef.isHiddenHollow) firstVisibleHollowIndex = di;\r\n        if (nextDef.isInput && !nextDef.isHollow) {\r\n          firstFilledInputIndex = di;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // for lazy if has aligned left inside fixed and has came to the start - use start position\r\n    if (direction === DIRECTION.LEFT && di === 0 && this.lazy && !this.extractInput() &&\r\n      (!initialDef || !initialDef.isInput)) firstInputIndex = 0;\r\n\r\n    if (direction === DIRECTION.LEFT || firstInputIndex == null) {\r\n      // search backward\r\n      step = -step;\r\n      let overflow = false;\r\n\r\n      // find hollows only before initial pos\r\n      for (\r\n        nextdi = indexInDirection(di, step);\r\n        0 <= nextdi && nextdi < this._charDefs.length;\r\n        di += step, nextdi += step\r\n      ) {\r\n        const nextDef = this._charDefs[nextdi];\r\n        if (nextDef.isInput) {\r\n          firstInputIndex = di;\r\n          if (nextDef.isHollow && !nextDef.isHiddenHollow) break;\r\n        }\r\n\r\n        // if hollow not found before start position - set `overflow`\r\n        // and try to find just any input\r\n        if (di === initialDefIndex) overflow = true;\r\n\r\n        // first input found\r\n        if (overflow && firstInputIndex != null) break;\r\n      }\r\n\r\n      // process overflow\r\n      overflow = overflow || nextdi >= this._charDefs.length;\r\n      if (overflow && firstInputIndex != null) di = firstInputIndex;\r\n    } else if (firstFilledInputIndex == null) {\r\n      // adjust index if delete at right and filled input not found at right\r\n      di = firstVisibleHollowIndex != null ?\r\n        firstVisibleHollowIndex :\r\n        firstInputIndex;\r\n    }\r\n\r\n    return this.mapDefIndexToPos(di);\r\n  }\r\n\r\n  /** Get group by name */\r\n  group (name: string): ?PatternGroup {\r\n    return this.groupsByName(name)[0];\r\n  }\r\n\r\n  /** Get all groups by name */\r\n  groupsByName (name: string): Array<PatternGroup> {\r\n    return this._groupDefs.filter(g => g.name === name);\r\n  }\r\n}\r\nMaskedPattern.DEFAULTS = {\r\n  lazy: true,\r\n  placeholderChar: '_'\r\n};\r\nMaskedPattern.STOP_CHAR = '`';\r\nMaskedPattern.ESCAPE_CHAR = '\\\\';\r\nMaskedPattern.Definition = PatternDefinition;\r\nMaskedPattern.Group = PatternGroup;\r\n","// @flow\r\nimport MaskedPattern from './pattern.js';\r\nimport PatternGroup from './pattern/group.js';\r\n\r\n\r\n/** Date mask */\r\nexport default\r\nclass MaskedDate extends MaskedPattern {\r\n  static GET_DEFAULT_GROUPS: () => {[string]: PatternGroup};\r\n  static DEFAULTS: any;\r\n\r\n  /** Parse string to Date */\r\n  parse: (string) => Date;\r\n  /** Format Date to string */\r\n  format: (Date) => string;\r\n  /** Pattern mask for date according to {@link MaskedDate#format} */\r\n  pattern: string;\r\n  /** Start date */\r\n  min: ?Date;\r\n  /** End date */\r\n  max: ?Date;\r\n\r\n  /**\r\n    @param {Object} opts\r\n  */\r\n  constructor (opts: any) {\r\n    super({\r\n      ...MaskedDate.DEFAULTS,\r\n      ...opts\r\n    });\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _update (opts: any) {\r\n    if (opts.mask === Date) delete opts.mask;\r\n    if (opts.pattern) {\r\n      opts.mask = opts.pattern;\r\n      delete opts.pattern;\r\n    }\r\n\r\n    const groups = opts.groups;\r\n    opts.groups = Object.assign({}, MaskedDate.GET_DEFAULT_GROUPS());\r\n    // adjust year group\r\n    if (opts.min) opts.groups.Y.from = opts.min.getFullYear();\r\n    if (opts.max) opts.groups.Y.to = opts.max.getFullYear();\r\n    Object.assign(opts.groups, groups);\r\n\r\n    super._update(opts);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  doValidate (...args: *) {\r\n    const valid = super.doValidate(...args);\r\n    const date = this.date;\r\n\r\n    return valid &&\r\n      (!this.isComplete ||\r\n        this.isDateExist(this.value) && date &&\r\n        (this.min == null || this.min <= date) &&\r\n        (this.max == null || date <= this.max));\r\n  }\r\n\r\n  /** Checks if date is exists */\r\n  isDateExist (str: string): boolean {\r\n    return this.format(this.parse(str)) === str;\r\n  }\r\n\r\n  /** Parsed Date */\r\n  get date (): ?Date {\r\n    return this.isComplete ?\r\n      this.parse(this.value) :\r\n      null;\r\n  }\r\n\r\n  set date (date: Date) {\r\n    this.value = this.format(date);\r\n  }\r\n}\r\nMaskedDate.DEFAULTS = {\r\n  pattern: 'd{.}`m{.}`Y',\r\n  format: date => {\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const year = date.getFullYear();\r\n\r\n    return [day, month, year].join('.');\r\n  },\r\n  parse: str => {\r\n    const [day, month, year] = str.split('.');\r\n    return new Date(year, month - 1, day);\r\n  },\r\n};\r\nMaskedDate.GET_DEFAULT_GROUPS = () => {\r\n  return {\r\n    d: new PatternGroup.Range([1, 31]),\r\n    m: new PatternGroup.Range([1, 12]),\r\n    Y: new PatternGroup.Range([1900, 9999]),\r\n  };\r\n}","// @flow\r\nimport {objectIncludes, DIRECTION, type Selection} from '../core/utils.js';\r\nimport ActionDetails from '../core/action-details.js';\r\nimport MaskedDate from '../masked/date.js';\r\nimport createMask, {maskedClass} from '../masked/factory.js';\r\nimport type Masked from '../masked/base.js';\r\nimport {type Mask} from '../masked/base.js';\r\n\r\n\r\n/**\r\n  Generic element API to use with mask\r\n  @interface\r\n*/\r\ninterface UIElement {\r\n  value: string;\r\n  selectionStart: number;\r\n  selectionEnd: number;\r\n  setSelectionRange (number, number): void;\r\n  addEventListener(string, Function): void;\r\n  removeEventListener(string, Function): void;\r\n}\r\n\r\n\r\n/** Listens to element events and controls changes between element and {@link Masked} */\r\nexport default\r\nclass InputMask {\r\n  /**\r\n    View element\r\n    @readonly\r\n  */\r\n  el: UIElement;\r\n\r\n  /**\r\n    Internal {@link Masked} model\r\n    @readonly\r\n  */\r\n  masked: Masked<*>;\r\n  alignCursor: () => void;\r\n  alignCursorFriendly: () => void;\r\n\r\n  _listeners: {[string]: Array<Function>};\r\n  _value: string;\r\n  _changingCursorPos: number;\r\n  _unmaskedValue: string;\r\n  _saveSelection: (?Event) => void;\r\n  _selection: Selection;\r\n  _onInput: (Event) => void;\r\n  _onChange: () => void;\r\n  _onDrop: (Event) => void;\r\n  _cursorChanging: TimeoutID;\r\n\r\n  /**\r\n    @param {UIElement} el\r\n    @param {Object} opts\r\n  */\r\n  constructor (el: UIElement, opts: {[string]: any}) {\r\n    this.el = el;\r\n    this.masked = createMask(opts);\r\n\r\n    this._listeners = {};\r\n    this._value = '';\r\n    this._unmaskedValue = '';\r\n\r\n    this._saveSelection = this._saveSelection.bind(this);\r\n    this._onInput = this._onInput.bind(this);\r\n    this._onChange = this._onChange.bind(this);\r\n    this._onDrop = this._onDrop.bind(this);\r\n    this.alignCursor = this.alignCursor.bind(this);\r\n    this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\r\n\r\n    this._bindEvents();\r\n\r\n    // refresh\r\n    this.updateValue();\r\n    this._onChange();\r\n  }\r\n\r\n  /** Read or update mask */\r\n  get mask (): Mask {\r\n    return this.masked.mask;\r\n  }\r\n  set mask (mask: Mask) {\r\n    if (mask == null || mask === this.masked.mask) return;\r\n\r\n    if (this.masked.constructor === maskedClass(mask)) {\r\n      this.masked.mask = mask;\r\n      return;\r\n    }\r\n\r\n    const masked = createMask({mask});\r\n    masked.unmaskedValue = this.masked.unmaskedValue;\r\n    this.masked = masked;\r\n  }\r\n\r\n  /** Raw value */\r\n  get value (): string {\r\n    return this._value;\r\n  }\r\n\r\n  set value (str: string) {\r\n    this.masked.value = str;\r\n    this.updateControl();\r\n    this.alignCursor();\r\n  }\r\n\r\n  /** Unmasked value */\r\n  get unmaskedValue (): string {\r\n    return this._unmaskedValue;\r\n  }\r\n\r\n  set unmaskedValue (str: string) {\r\n    this.masked.unmaskedValue = str;\r\n    this.updateControl();\r\n    this.alignCursor();\r\n  }\r\n\r\n  /**\r\n    Starts listening to element events\r\n    @protected\r\n  */\r\n  _bindEvents () {\r\n    this.el.addEventListener('keydown', this._saveSelection);\r\n    this.el.addEventListener('input', this._onInput);\r\n    this.el.addEventListener('drop', this._onDrop);\r\n    this.el.addEventListener('click', this.alignCursorFriendly);\r\n    this.el.addEventListener('change', this._onChange);\r\n  }\r\n\r\n  /**\r\n    Stops listening to element events\r\n    @protected\r\n   */\r\n  _unbindEvents () {\r\n    this.el.removeEventListener('keydown', this._saveSelection);\r\n    this.el.removeEventListener('input', this._onInput);\r\n    this.el.removeEventListener('drop', this._onDrop);\r\n    this.el.removeEventListener('click', this.alignCursorFriendly);\r\n    this.el.removeEventListener('change', this._onChange);\r\n  }\r\n\r\n  /**\r\n    Fires custom event\r\n    @protected\r\n   */\r\n  _fireEvent (ev: string) {\r\n    const listeners = this._listeners[ev] || [];\r\n    listeners.forEach(l => l());\r\n  }\r\n\r\n  /**\r\n    Current selection start\r\n    @readonly\r\n  */\r\n  get selectionStart (): number {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionStart;\r\n  }\r\n\r\n  /** Current cursor position */\r\n  get cursorPos (): number {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionEnd;\r\n  }\r\n  set cursorPos (pos: number) {\r\n    if (this.el !== document.activeElement) return;\r\n\r\n    this.el.setSelectionRange(pos, pos);\r\n    this._saveSelection();\r\n  }\r\n\r\n  /**\r\n    Stores current selection\r\n    @protected\r\n  */\r\n  _saveSelection (/* ev */) {\r\n    if (this.value !== this.el.value) {\r\n      console.warn('Uncontrolled input change, refresh mask manually!'); // eslint-disable-line no-console\r\n    }\r\n    this._selection = {\r\n      start: this.selectionStart,\r\n      end: this.cursorPos\r\n    };\r\n  }\r\n\r\n  /** Syncronizes model value from view */\r\n  updateValue () {\r\n    this.masked.value = this.el.value;\r\n  }\r\n\r\n  /** Syncronizes view from model value, fires change events */\r\n  updateControl () {\r\n    const newUnmaskedValue = this.masked.unmaskedValue;\r\n    const newValue = this.masked.value;\r\n    const isChanged = (this.unmaskedValue !== newUnmaskedValue ||\r\n      this.value !== newValue);\r\n\r\n    this._unmaskedValue = newUnmaskedValue;\r\n    this._value = newValue;\r\n\r\n    if (this.el.value !== newValue) this.el.value = newValue;\r\n    if (isChanged) this._fireChangeEvents();\r\n  }\r\n\r\n  /** Updates options with deep equal check, recreates @{link Masked} model if mask type changes */\r\n  updateOptions (opts: {[string]: any}) {\r\n    opts = Object.assign({}, opts);  // clone\r\n    if (opts.mask === Date && this.masked instanceof MaskedDate) delete opts.mask;\r\n\r\n    // check if changed\r\n    if (objectIncludes(this.masked, opts)) return;\r\n\r\n    this.masked.updateOptions(opts);\r\n    this.updateControl();\r\n  }\r\n\r\n  /** Updates cursor */\r\n  updateCursor (cursorPos: number) {\r\n    if (cursorPos == null) return;\r\n    this.cursorPos = cursorPos;\r\n\r\n    // also queue change cursor for mobile browsers\r\n    this._delayUpdateCursor(cursorPos);\r\n  }\r\n\r\n  /**\r\n    Delays cursor update to support mobile browsers\r\n    @private\r\n  */\r\n  _delayUpdateCursor (cursorPos: number) {\r\n    this._abortUpdateCursor();\r\n    this._changingCursorPos = cursorPos;\r\n    this._cursorChanging = setTimeout(() => {\r\n      if (!this.el) return; // if was destroyed\r\n      this.cursorPos = this._changingCursorPos;\r\n      this._abortUpdateCursor();\r\n    }, 10);\r\n  }\r\n\r\n  /**\r\n    Fires custom events\r\n    @protected\r\n  */\r\n  _fireChangeEvents () {\r\n    this._fireEvent('accept');\r\n    if (this.masked.isComplete) this._fireEvent('complete');\r\n  }\r\n\r\n  /**\r\n    Aborts delayed cursor update\r\n    @private\r\n  */\r\n  _abortUpdateCursor () {\r\n    if (this._cursorChanging) {\r\n      clearTimeout(this._cursorChanging);\r\n      delete this._cursorChanging;\r\n    }\r\n  }\r\n\r\n  /** Aligns cursor to nearest available position */\r\n  alignCursor () {\r\n    this.cursorPos = this.masked.nearestInputPos(this.cursorPos, DIRECTION.LEFT);\r\n  }\r\n\r\n  /** Aligns cursor only if selection is empty */\r\n  alignCursorFriendly () {\r\n    if (this.selectionStart !== this.cursorPos) return;\r\n    this.alignCursor();\r\n  }\r\n\r\n  /** Adds listener on custom event */\r\n  on (ev: string, handler: Function) {\r\n    if (!this._listeners[ev]) this._listeners[ev] = [];\r\n    this._listeners[ev].push(handler);\r\n    return this;\r\n  }\r\n\r\n  /** Removes custom event listener */\r\n  off (ev: string, handler: Function) {\r\n    if (!this._listeners[ev]) return;\r\n    if (!handler) {\r\n      delete this._listeners[ev];\r\n      return;\r\n    }\r\n    const hIndex = this._listeners[ev].indexOf(handler);\r\n    if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);\r\n    return this;\r\n  }\r\n\r\n  /** Handles view input event */\r\n  _onInput () {\r\n    this._abortUpdateCursor();\r\n\r\n    const details = new ActionDetails(\r\n      // new state\r\n      this.el.value, this.cursorPos,\r\n      // old state\r\n      this.value, this._selection);\r\n\r\n    const offset = this.masked.splice(\r\n      details.startChangePos,\r\n      details.removed.length,\r\n      details.inserted,\r\n      details.removeDirection).offset;\r\n\r\n    const cursorPos = this.masked.nearestInputPos(details.startChangePos + offset, details.removeDirection);\r\n\r\n    this.updateControl();\r\n    this.updateCursor(cursorPos);\r\n  }\r\n\r\n  /** Handles view change event and commits model value */\r\n  _onChange () {\r\n    if (this.value !== this.el.value) {\r\n      this.updateValue();\r\n    }\r\n    this.masked.doCommit();\r\n    this.updateControl();\r\n  }\r\n\r\n  /** Handles view drop event, prevents by default */\r\n  _onDrop (ev: Event) {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  /** Unbind view events and removes element reference */\r\n  destroy () {\r\n    this._unbindEvents();\r\n    // $FlowFixMe why not do so?\r\n    this._listeners.length = 0;\r\n    delete this.el;\r\n  }\r\n}\r\n","// @flow\r\nimport {escapeRegExp, indexInDirection, type Direction} from '../core/utils.js';\r\nimport Masked, {type MaskedOptions, type AppendFlags} from './base.js';\r\nimport {type TailDetails} from '../core/tail-details.js';\r\n\r\n\r\ntype MaskedNumberOptions = {\r\n  ...MaskedOptions<Number>,\r\n  radix: $PropertyType<MaskedNumber, 'radix'>,\r\n  thousandsSeparator: $PropertyType<MaskedNumber, 'thousandsSeparator'>,\r\n  mapToRadix: $PropertyType<MaskedNumber, 'mapToRadix'>,\r\n  scale: $PropertyType<MaskedNumber, 'scale'>,\r\n  signed: $PropertyType<MaskedNumber, 'signed'>,\r\n  normalizeZeros: $PropertyType<MaskedNumber, 'normalizeZeros'>,\r\n  padFractionalZeros: $PropertyType<MaskedNumber, 'padFractionalZeros'>,\r\n};\r\n\r\n/**\r\n  Number mask\r\n  @param {Object} opts\r\n  @param {string} opts.radix - Single char\r\n  @param {string} opts.thousandsSeparator - Single char\r\n  @param {Array<string>} opts.mapToRadix - Array of single chars\r\n  @param {number} opts.min\r\n  @param {number} opts.max\r\n  @param {number} opts.scale - Digits after point\r\n  @param {boolean} opts.signed - Allow negative\r\n  @param {boolean} opts.normalizeZeros - Flag to remove leading and trailing zeros in the end of editing\r\n  @param {boolean} opts.padFractionalZeros - Flag to pad trailing zeros after point in the end of editing\r\n*/\r\nexport default\r\nclass MaskedNumber extends Masked<Number> {\r\n  static DEFAULTS: $Shape<MaskedNumberOptions>;\r\n\r\n  /** Single char */\r\n  radix: string;\r\n  /** Single char */\r\n  thousandsSeparator: string;\r\n  /** Array of single chars */\r\n  mapToRadix: Array<string>;\r\n  /** */\r\n  min: number;\r\n  /** */\r\n  max: number;\r\n  /** Digits after point */\r\n  scale: number;\r\n  /** */\r\n  signed: boolean;\r\n  /** Flag to remove leading and trailing zeros in the end of editing */\r\n  normalizeZeros: boolean;\r\n  /** Flag to pad trailing zeros after point in the end of editing */\r\n  padFractionalZeros: boolean;\r\n  _numberRegExp: RegExp;\r\n  _numberRegExpInput: RegExp;\r\n  _thousandsSeparatorRegExp: RegExp;\r\n  _mapToRadixRegExp: RegExp;\r\n\r\n  constructor (opts: $Shape<MaskedNumberOptions>) {\r\n    super({\r\n      ...MaskedNumber.DEFAULTS,\r\n      ...opts\r\n    });\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _update (opts: MaskedNumberOptions) {\r\n    super._update(opts);\r\n    this._updateRegExps();\r\n  }\r\n\r\n  /** */\r\n  _updateRegExps () {\r\n    // use different regexp to process user input (more strict, input suffix) and tail shifting\r\n    const start = '^'\r\n\r\n    let midInput = '';\r\n    let mid = '';\r\n    if (this.allowNegative) {\r\n      midInput += '([+|\\\\-]?|([+|\\\\-]?(0|([1-9]+\\\\d*))))';\r\n      mid += '[+|\\\\-]?';\r\n    } else {\r\n      midInput += '(0|([1-9]+\\\\d*))';\r\n    }\r\n    mid += '\\\\d*';\r\n\r\n    let end = (this.scale ?\r\n      '(' + this.radix + '\\\\d{0,' + this.scale + '})?' :\r\n      '') + '$';\r\n\r\n    this._numberRegExpInput = new RegExp(start + midInput + end);\r\n    this._numberRegExp = new RegExp(start + mid + end);\r\n    this._mapToRadixRegExp = new RegExp('[' +\r\n      this.mapToRadix.map(escapeRegExp).join('') +\r\n    ']', 'g');\r\n    this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _extractTail (fromPos: number=0, toPos: number=this.value.length): TailDetails {\r\n    const tail = super._extractTail(fromPos, toPos);\r\n\r\n    return {\r\n      ...tail,\r\n      value: this._removeThousandsSeparators(tail.value),\r\n    };\r\n  }\r\n\r\n  /** */\r\n  _removeThousandsSeparators (value: string): string {\r\n    return value.replace(this._thousandsSeparatorRegExp, '');\r\n  }\r\n\r\n  /** */\r\n  _insertThousandsSeparators (value: string): string {\r\n    // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\r\n    const parts = value.split(this.radix);\r\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\r\n    return parts.join(this.radix);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  doPrepare (str: string, ...args: *) {\r\n    return super.doPrepare(this._removeThousandsSeparators(str.replace(this._mapToRadixRegExp, this.radix)), ...args);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  appendWithTail (...args: *) {\r\n    let previousValue = this.value;\r\n    this._value = this._removeThousandsSeparators(this.value);\r\n    let startChangePos = this.value.length;\r\n\r\n    const appendDetails = super.appendWithTail(...args);\r\n    this._value = this._insertThousandsSeparators(this.value);\r\n\r\n    // calculate offsets after insert separators\r\n    let beforeTailPos = startChangePos + appendDetails.inserted.length;\r\n    for (let pos = 0; pos <= beforeTailPos; ++pos) {\r\n      if (this.value[pos] === this.thousandsSeparator) {\r\n        if (pos < startChangePos ||\r\n          // check high bound\r\n          // if separator is still there - consider it also\r\n          (pos === startChangePos && previousValue[pos] === this.thousandsSeparator)) {\r\n          ++startChangePos;\r\n        }\r\n        if (pos < beforeTailPos) ++beforeTailPos;\r\n      }\r\n    }\r\n\r\n    // adjust details with separators\r\n    appendDetails.rawInserted = appendDetails.inserted;\r\n    appendDetails.inserted = this.value.slice(startChangePos, beforeTailPos);\r\n    appendDetails.shift += startChangePos - previousValue.length;\r\n\r\n    return appendDetails;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  nearestInputPos (cursorPos: number, direction?: Direction): number {\r\n    if (!direction) return cursorPos;\r\n\r\n    const nextPos = indexInDirection(cursorPos, direction);\r\n    if (this.value[nextPos] === this.thousandsSeparator) cursorPos += direction;\r\n    return cursorPos;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  doValidate (flags: AppendFlags) {\r\n    const regexp = flags.input ? this._numberRegExpInput : this._numberRegExp;\r\n\r\n    // validate as string\r\n    let valid = regexp.test(this._removeThousandsSeparators(this.value));\r\n\r\n    if (valid) {\r\n      // validate as number\r\n      const number = this.number;\r\n      valid = valid && !isNaN(number) &&\r\n        // check min bound for negative values\r\n        (this.min == null || this.min >= 0 || this.min <= this.number) &&\r\n        // check max bound for positive values\r\n        (this.max == null || this.max <= 0 || this.number <= this.max);\r\n    }\r\n\r\n    return valid && super.doValidate(flags);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  doCommit () {\r\n    const number = this.number;\r\n    let validnum = number;\r\n\r\n    // check bounds\r\n    if (this.min != null) validnum = Math.max(validnum, this.min);\r\n    if (this.max != null) validnum = Math.min(validnum, this.max);\r\n\r\n    if (validnum !== number) this.unmaskedValue = String(validnum);\r\n\r\n    let formatted = this.value;\r\n\r\n    if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\r\n    if (this.padFractionalZeros) formatted = this._padFractionalZeros(formatted);\r\n\r\n    this._value = formatted;\r\n    super.doCommit();\r\n  }\r\n\r\n  /** */\r\n  _normalizeZeros (value: string): string {\r\n    const parts = this._removeThousandsSeparators(value).split(this.radix);\r\n\r\n    // remove leading zeros\r\n    parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, (match, sign, zeros, num) => sign + num);\r\n    // add leading zero\r\n    if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\r\n\r\n    if (parts.length > 1) {\r\n      parts[1] = parts[1].replace(/0*$/, '');  // remove trailing zeros\r\n      if (!parts[1].length) parts.length = 1;  // remove fractional\r\n    }\r\n\r\n    return this._insertThousandsSeparators(parts.join(this.radix));\r\n  }\r\n\r\n  /** */\r\n  _padFractionalZeros (value: string): string {\r\n    if (!value) return value;\r\n\r\n    const parts = value.split(this.radix);\r\n    if (parts.length < 2) parts.push('');\r\n    parts[1] = parts[1].padEnd(this.scale, '0');\r\n    return parts.join(this.radix);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  get unmaskedValue (): string {\r\n    return this._removeThousandsSeparators(\r\n      this._normalizeZeros(\r\n        this.value))\r\n      .replace(this.radix, '.');\r\n  }\r\n\r\n  set unmaskedValue (unmaskedValue: string) {\r\n    super.unmaskedValue = unmaskedValue.replace('.', this.radix);\r\n  }\r\n\r\n  /** Parsed Number */\r\n  get number (): number {\r\n    return Number(this.unmaskedValue);\r\n  }\r\n\r\n  set number (number: number) {\r\n    this.unmaskedValue = String(number);\r\n  }\r\n\r\n  /**\r\n    Is negative allowed\r\n    @readonly\r\n  */\r\n  get allowNegative (): boolean {\r\n    return this.signed ||\r\n      (this.min != null && this.min < 0) ||\r\n      (this.max != null && this.max < 0);\r\n  }\r\n}\r\nMaskedNumber.DEFAULTS = {\r\n  radix: ',',\r\n  thousandsSeparator: '',\r\n  mapToRadix: ['.'],\r\n  scale: 2,\r\n  signed: false,\r\n  normalizeZeros: true,\r\n  padFractionalZeros: false,\r\n};\r\n","// @flow\r\nimport Masked, {type MaskedOptions} from './base.js';\r\n\r\n\r\n/** Masking by RegExp */\r\nexport default\r\nclass MaskedRegExp extends Masked<RegExp> {\r\n  /**\r\n    @override\r\n    @param {Object} opts\r\n  */\r\n  _update (opts: $Shape<MaskedOptions<RegExp>>) {\r\n    opts.validate = (value) => value.search(opts.mask) >= 0;\r\n    super._update(opts);\r\n  }\r\n}\r\n","// @flow\r\nimport Masked, {type MaskedOptions} from './base.js';\r\n\r\n\r\n/** Masking by custom Function */\r\nexport default\r\nclass MaskedFunction extends Masked<Function> {\r\n  /**\r\n    @override\r\n    @param {Object} opts\r\n  */\r\n  _update (opts: MaskedOptions<Function>) {\r\n    opts.validate = opts.mask;\r\n    super._update(opts);\r\n  }\r\n}\r\n","// @flow\r\nimport ChangeDetails from '../core/change-details.js';\r\nimport createMask from './factory.js';\r\nimport Masked, {type AppendFlags} from './base.js';\r\nimport {type TailDetails} from '../core/tail-details.js';\r\n\r\n\r\ntype DynamicMaskType = Array<{[string]: any}>;\r\n/** Dynamic mask for choosing apropriate mask in run-time */\r\nexport default\r\nclass MaskedDynamic extends Masked<DynamicMaskType> {\r\n  /** Currently chosen mask */\r\n  currentMask: ?Masked<*>;\r\n  /** Compliled {@link Masked} options */\r\n  compiledMasks: Array<Masked<*>>;\r\n  /** Chooses {@link Masked} depending on input value */\r\n  dispatch: (string, Masked<*>, AppendFlags) => Masked<*>;\r\n\r\n  /**\r\n    @param {Object} opts\r\n  */\r\n  constructor (opts: any) {\r\n    super({\r\n      ...MaskedDynamic.DEFAULTS,\r\n      ...opts\r\n    });\r\n\r\n    this.currentMask = null;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _update (opts: any) {\r\n    super._update(opts);\r\n    // mask could be totally dynamic with only `dispatch` option\r\n    this.compiledMasks = Array.isArray(opts.mask) ?\r\n      opts.mask.map(m => createMask(m)) :\r\n      [];\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _append (str: string, ...args: *): ChangeDetails {\r\n    str = this.doPrepare(str, ...args);\r\n\r\n    const details = this._applyDispatch(str, ...args);\r\n\r\n    if (this.currentMask) {\r\n      details.aggregate(this.currentMask._append(str, ...args));\r\n    }\r\n\r\n    return details;\r\n  }\r\n\r\n  _applyDispatch (appended: string='', ...args: *) {\r\n    const oldValueLength = this.value.length;\r\n    const inputValue = this.rawInputValue;\r\n    const oldMask = this.currentMask;\r\n    const details = new ChangeDetails();\r\n\r\n    // dispatch SHOULD NOT modify mask\r\n    this.currentMask = this.doDispatch(appended, ...args);\r\n\r\n    // restore state after dispatch\r\n    if (this.currentMask && this.currentMask !== oldMask) {\r\n      // if mask changed reapply input\r\n      this.currentMask.reset();\r\n      // $FlowFixMe - it's ok, we don't change current mask\r\n      this.currentMask._append(inputValue, {raw: true});\r\n      details.shift = this.value.length - oldValueLength;\r\n    }\r\n\r\n    return details;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  doDispatch(appended: string, flags: AppendFlags={}) {\r\n    return this.dispatch(appended, this, flags);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  clone (): MaskedDynamic {\r\n    const m = new MaskedDynamic(this);\r\n    m._value = this.value;\r\n\r\n    // try to keep reference to compiled masks\r\n    const currentMaskIndex = this.compiledMasks.indexOf(this.currentMask);\r\n    if (this.currentMask) {\r\n      m.currentMask = currentMaskIndex >= 0 ?\r\n        m.compiledMasks[currentMaskIndex].assign(this.currentMask) :\r\n        this.currentMask.clone();\r\n    }\r\n\r\n    return m;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  reset () {\r\n    if (this.currentMask) this.currentMask.reset();\r\n    this.compiledMasks.forEach(cm => cm.reset());\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  get value (): string {\r\n    return this.currentMask ? this.currentMask.value : '';\r\n  }\r\n\r\n  set value (value: string) {\r\n    super.value = value;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  get unmaskedValue (): string {\r\n    return this.currentMask ? this.currentMask.unmaskedValue : '';\r\n  }\r\n\r\n  set unmaskedValue (unmaskedValue: string) {\r\n    super.unmaskedValue = unmaskedValue;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  get isComplete (): boolean {\r\n    return !!this.currentMask && this.currentMask.isComplete;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  remove (...args: *): ChangeDetails {\r\n    const details: ChangeDetails = new ChangeDetails();\r\n    if (this.currentMask) {\r\n      details.aggregate(this.currentMask.remove(...args))\r\n        // update with dispatch\r\n        .aggregate(this._applyDispatch());\r\n    }\r\n\r\n    return details;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  extractInput (...args: *): string {\r\n    return this.currentMask ?\r\n      this.currentMask.extractInput(...args) :\r\n      '';\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _extractTail (...args: *): TailDetails {\r\n    return this.currentMask ?\r\n      this.currentMask._extractTail(...args) :\r\n      super._extractTail(...args);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _appendTail (tail?: TailDetails): ChangeDetails {\r\n    const details = new ChangeDetails();\r\n    if (tail) details.aggregate(this._applyDispatch(tail.value));\r\n\r\n    return details.aggregate(this.currentMask ?\r\n      this.currentMask._appendTail(tail) :\r\n      super._appendTail(tail));\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  doCommit () {\r\n    if (this.currentMask) this.currentMask.doCommit();\r\n    super.doCommit();\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  nearestInputPos(...args: *): number {\r\n    return this.currentMask ?\r\n      this.currentMask.nearestInputPos(...args) :\r\n      super.nearestInputPos(...args);\r\n  }\r\n}\r\n\r\nMaskedDynamic.DEFAULTS = {\r\n  dispatch: (appended, masked, flags) => {\r\n    if (!masked.compiledMasks.length) return;\r\n\r\n    const inputValue = masked.rawInputValue;\r\n\r\n    // simulate input\r\n    const inputs = masked.compiledMasks.map((cm, index) => {\r\n      const m = cm.clone();\r\n      m.rawInputValue = inputValue;\r\n      m._append(appended, flags);\r\n\r\n      return {value: m.rawInputValue.length, index};\r\n    });\r\n\r\n    // pop masks with longer values first\r\n    inputs.sort((i1, i2) => i2.value - i1.value);\r\n\r\n    return masked.compiledMasks[inputs[0].index];\r\n  }\r\n};\r\n","import {g} from './core/utils.js';\r\n\r\nimport InputMask from './controls/input.js';\r\n\r\nimport Masked from './masked/base.js';\r\nimport MaskedPattern from './masked/pattern.js';\r\nimport MaskedNumber from './masked/number.js';\r\nimport MaskedDate from './masked/date.js';\r\nimport MaskedRegExp from './masked/regexp.js';\r\nimport MaskedFunction from './masked/function.js';\r\nimport MaskedDynamic from './masked/dynamic.js';\r\nimport createMask from './masked/factory.js';\r\n\r\n\r\n/**\r\n * Applies mask on element.\r\n * @constructor\r\n * @param {HTMLInput|UIElement} el - Element to apply mask\r\n * @param {Object} opts - Custom mask options\r\n * @return {InputMask}\r\n */\r\nexport default\r\nfunction IMask (el, opts={}) {\r\n\t// currently available only for input-like elements\r\n  return new InputMask(el, opts);\r\n}\r\n\r\n/** {@link InputMask} */\r\nIMask.InputMask = InputMask;\r\n\r\n/** {@link Masked} */\r\nIMask.Masked = Masked;\r\n/** {@link MaskedPattern} */\r\nIMask.MaskedPattern = MaskedPattern;\r\n/** {@link MaskedNumber} */\r\nIMask.MaskedNumber = MaskedNumber;\r\n/** {@link MaskedDate} */\r\nIMask.MaskedDate = MaskedDate;\r\n/** {@link MaskedRegExp} */\r\nIMask.MaskedRegExp = MaskedRegExp;\r\n/** {@link MaskedFunction} */\r\nIMask.MaskedFunction = MaskedFunction;\r\n/** {@link MaskedDynamic} */\r\nIMask.MaskedDynamic = MaskedDynamic;\r\n/** {@link createMask} */\r\nIMask.createMask = createMask;\r\n\r\ng.IMask = IMask;\r\n"],"names":["isString","str","String","conform","res","fallback","DIRECTION","indexInDirection","pos","direction","LEFT","escapeRegExp","replace","objectIncludes","b","a","i","arrA","Array","isArray","arrB","length","keys","Object","dateA","Date","dateB","getTime","regexpA","RegExp","regexpB","toString","prototype","hasOwnProperty","call","g","window","global","self","ActionDetails","value","cursorPos","oldValue","oldSelection","this","slice","startChangePos","start","Math","min","substr","insertedCount","max","end","removedCount","substring","NONE","RIGHT","ChangeDetails","details","assign","rawInserted","inserted","shift","overflow","_rawInserted","Masked","opts","_value","_update","DEFAULTS","isInitialized","withValueRefresh","bind","m","source","resolve","reset","_append","input","_appendTail","doCommit","extractInput","raw","fromPos","toPos","flags","tail","oldValueLength","consistentValue","clone","doPrepare","ci","doValidate","aggregateDetails","consistentAppended","ch","appendDetails","aggregate","from","count","fn","_refreshing","unmasked","unmaskedValue","ret","prepare","validate","commit","deleteCount","removeDirection","tailPos","_extractTail","nearestInputPos","remove","appendWithTail","maskedClass","mask","Error","IMask","MaskedRegExp","MaskedPattern","MaskedDate","Number","MaskedNumber","MaskedDynamic","Function","MaskedFunction","warn","createMask","val","PatternDefinition","_masked","isHollow","isRawInput","type","TYPES","INPUT","optional","PatternGroup","masked","name","offset","mapDefIndexToPos","RangeGroup","to","maxlen","_from","_to","_maxLength","maxLength","repeat","minstr","maxstr","match","placeholder","num","search","_matchFrom","padEnd","EnumGroup","enums","group","some","e","indexOf","Range","Enum","ChunksTailDetails","chunks","map","c","join","firstChunk","stop","lastChunk","definitions","_rebuildMask","defs","_charDefs","_groupDefs","pattern","unmaskingBlock","optionalBlock","stopAlign","groups","p","gNames","filter","gName","sort","push","char","FIXED","unmasking","STOP_CHAR","ESCAPE_CHAR","args","every","super","forEach","d","isInput","defIndex","isHiddenHollow","hiddenHollowsBefore","di","def","_appendChunks","_appendPlaceholder","mapPosToDefIndex","resolved","skipped","chres","lazy","placeholderChar","fromDef","_extractInputChunks","toDefIndex","fromDefIndex","stopDefIndices","stops","s","maxDefIndex","step","initialDefIndex","initialDef","firstInputIndex","firstFilledInputIndex","firstVisibleHollowIndex","nextdi","nextDef","groupsByName","Definition","Group","GET_DEFAULT_GROUPS","Y","getFullYear","valid","date","isComplete","isDateExist","format","parse","getDate","padStart","getMonth","split","day","month","year","InputMask","el","_listeners","_unmaskedValue","_saveSelection","_onInput","_onChange","_onDrop","alignCursor","alignCursorFriendly","_bindEvents","updateValue","constructor","updateControl","addEventListener","removeEventListener","ev","l","_cursorChanging","_changingCursorPos","selectionStart","selectionEnd","document","activeElement","setSelectionRange","_selection","newUnmaskedValue","newValue","isChanged","_fireChangeEvents","updateOptions","_delayUpdateCursor","_abortUpdateCursor","setTimeout","_fireEvent","handler","hIndex","splice","removed","updateCursor","preventDefault","stopPropagation","_unbindEvents","_updateRegExps","midInput","mid","allowNegative","scale","radix","_numberRegExpInput","_numberRegExp","_mapToRadixRegExp","mapToRadix","_thousandsSeparatorRegExp","thousandsSeparator","_removeThousandsSeparators","parts","previousValue","_insertThousandsSeparators","beforeTailPos","nextPos","test","number","isNaN","validnum","formatted","normalizeZeros","_normalizeZeros","padFractionalZeros","_padFractionalZeros","sign","zeros","signed","currentMask","compiledMasks","_applyDispatch","appended","inputValue","rawInputValue","oldMask","doDispatch","dispatch","currentMaskIndex","cm","inputs","index","i1","i2"],"mappings":"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"}